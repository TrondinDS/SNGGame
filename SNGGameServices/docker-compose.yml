    services:

      userservices:
        build:
          context: ./UserService
          dockerfile: Dockerfile
        image: myuserimage:latest
        volumes:
          - .:/app
        ports:
          - "5285:8080"
          - "7134:8081"
        depends_on:
          - user-service-db
          - user-service-mongo

      user-service-db:
        image: postgres:latest
        environment:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: userdb
        ports:
          - "5433:5432"
        volumes:
          - user_service_db_data:/var/lib/postgresql/data
          - ./userdbinit.sql:/docker-entrypoint-initdb.d/init.sql 
        restart: unless-stopped
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U admin -d userdb"]
          interval: 30s 
          timeout: 10s  
          retries: 3    
          start_period: 30s

      user-service-mongo:
        image: mongo:latest
        environment:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin
        ports:
          - "27018:27017"
        volumes:
          - user_service_mongo_data:/data/db
        restart: unless-stopped
        healthcheck:
          test: ["CMD-SHELL", "mongo --eval 'db.runCommand({ ping: 1 })' && exit 0 || exit 1"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s

  
      studio-game-service:
        build:
          context: ./StudioGameService
          dockerfile: Dockerfile
        image: mystudiogameimage:latest
        environment:
          ASPNETCORE_ENVIRONMENT: Development
          ASPNETCORE_URLS: "http://*:8080;https://*:8081"
          ASPNETCORE_HTTPS_PORT: "8081"
        volumes:
          - .:/app
        ports:
          - "5114:8080"
          - "7053:8081"
        depends_on:
          - studio-game-db

      studio-game-db:
        image: postgres:latest
        environment:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: studiogamedb
        ports:
          - "5435:5432"
        volumes:
          - studio_game_db_data:/var/lib/postgresql/data
          - ./studiogamedbinit.sql:/docker-entrypoint-initdb.d/init.sql
        restart: unless-stopped
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U admin -d studiogamedb"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s


      user-activity-service:
        build:
          context: ./UserActivity
          dockerfile: Dockerfile
        image: myuseractivityimage:latest
        environment:
          ASPNETCORE_ENVIRONMENT: Development
          ASPNETCORE_URLS: "http://*:8080;https://*:8081"
          ASPNETCORE_HTTPS_PORT: "8081"
        volumes:
          - .:/app
        ports:
          - "5193:8080"
          - "7211:8081"
        depends_on:
          - user-activity-db

      user-activity-db:
        image: postgres:latest
        environment:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: useractivitydb
        ports:
          - "5436:5432"
        volumes:
          - user_activity_db_data:/var/lib/postgresql/data
          - ./useractivitydbinit.sql:/docker-entrypoint-initdb.d/init.sql
        restart: unless-stopped
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U admin -d useractivitydb"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s


      administratum-service:
        build:
          context: ./AdministratumService
          dockerfile: Dockerfile
        image: myadministratumimage:latest
        environment:
          ASPNETCORE_ENVIRONMENT: Development
        volumes:
          - .:/app
        ports:
          - "5283:8080"
        depends_on:
          - administratum-db
      

      administratum-db:
        image: postgres:latest
        environment:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: administratumdb
        ports:
          - "5437:5432"
        volumes:
          - administratum_db_data:/var/lib/postgresql/data
          - ./administratumdbinit.sql:/docker-entrypoint-initdb.d/init.sql
        restart: unless-stopped
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U admin -d administratumdb"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s

  
      organizer-event-service:
        build:
          context: ./OrganizerEventService
          dockerfile: Dockerfile
        image: myorganizereventimage:latest
        volumes:
          - .:/app
        ports:
          - "5286:8080"
        depends_on:
          - event-db


      event-db:
        image: postgres:latest
        environment:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: eventdb
        ports:
          - "5438:5432"
        volumes:
          - event_db_data:/var/lib/postgresql/data
          - ./eventdbinit.sql:/docker-entrypoint-initdb.d/init.sql 
        restart: unless-stopped
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U admin -d eventdb"]
          interval: 30s 
          timeout: 10s  
          retries: 3    
          start_period: 30s


      get-await-service:
        build:
          context: ./GetAwaitService
          dockerfile: Dockerfile
        image: mygetawaitimage:latest
        environment:
          ASPNETCORE_ENVIRONMENT: Development
          ASPNETCORE_URLS: "http://*:8080;https://*:8081"
          ASPNETCORE_HTTPS_PORT: "8081"
        volumes:
          - .:/app
        ports:
          - "5132:8080"
          - "7060:8081"
        depends_on:
          - get-await-db
    
      get-await-db:
        image: postgres:latest
        environment:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: getawaitdb
        ports:
          - "5439:5432"
        volumes:
          - get_await_db_data:/var/lib/postgresql/data
          - ./getawaitdbinit.sql:/docker-entrypoint-initdb.d/init.sql
        restart: unless-stopped
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U admin -d getawaitdb"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s


      pgadmin:
        image: dpage/pgadmin4:latest
        environment:
          PGADMIN_DEFAULT_EMAIL: admin@example.com
          PGADMIN_DEFAULT_PASSWORD: 123
        ports:
          - "5050:80"
        depends_on:
          - userservices


    volumes:
      user_service_db_data:
      user_service_mongo_data:

      studio_game_db_data:
      user_activity_db_data:
      administratum_db_data:
      event_db_data:
      get_await_db_data:
      # mongodb_data:


